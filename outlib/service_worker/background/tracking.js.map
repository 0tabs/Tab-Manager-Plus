{"version":3,"sources":["../../../lib/service_worker/background/tracking.js"],"names":["browser","windows","getAll","populate","activewindows","windowids","w","push","id","getLocalStorage","Array","i","length","indexOf","splice","setLocalStorage","names","colors","tocheck","Set","exists","to_refresh","parseInt","add","size","hashes","console","log","found","windowhash","hashcode","has","delete","runtime","sendMessage","command","window_ids","cleanUp","chrome"],"mappings":"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","file":"tracking.js","sourcesContent":["ï»¿var browser = browser || chrome;\r\n\r\nasync function cleanUp() {\r\n\tvar activewindows = await browser.windows.getAll({populate: true});\r\n\tvar windowids = [];\r\n\tfor (var w of activewindows) {\r\n\t\twindowids.push(w.id);\r\n\t}\r\n\t// console.log(\"window ids...\", windowids);\r\n\r\n\tvar windows = await getLocalStorage(\"windowAge\", []);\r\n\tif (!(windows instanceof Array)) windows = [];\r\n\r\n\t// console.log(\"before\", JSON.parse(JSON.stringify(windows)));\r\n\tfor (var i = windows.length - 1; i >= 0; i--) {\r\n\t\tif (windowids.indexOf(windows[i]) < 0) {\r\n\t\t\t// console.log(\"did not find\", windows[i], i);\r\n\t\t\twindows.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\t;\r\n\t// console.log(\"after\", JSON.parse(JSON.stringify(windows)));\r\n\tawait setLocalStorage(\"windowAge\", windows);\r\n\r\n\tvar names = await getLocalStorage(\"windowNames\", {});\r\n\tvar colors = await getLocalStorage(\"windowColors\", {});\r\n\tvar tocheck = new Set();\r\n\tvar exists = new Set();\r\n\tvar to_refresh = [];\r\n\r\n\t// console.log(\"before\", JSON.parse(JSON.stringify(names)));\r\n\tfor (var id in names) {\r\n\t\tif (windowids.indexOf(parseInt(id)) < 0) {\r\n\t\t\t// console.log(\"did not find\", id);\r\n\t\t\ttocheck.add(id);\r\n\t\t} else {\r\n\t\t\texists.add(id);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (var id in colors) {\r\n\t\tif (windowids.indexOf(parseInt(id)) < 0) {\r\n\t\t\t// console.log(\"did not find\", id);\r\n\t\t\ttocheck.add(id);\r\n\t\t} else {\r\n\t\t\texists.add(id);\r\n\t\t}\r\n\t}\r\n\r\n\tif (tocheck.size > 0) {\r\n\t\tvar hashes = await getLocalStorage(\"windowHashes\", {});\r\n\t\tconsole.log(hashes);\r\n\t\tconsole.log(names);\r\n\t\tconsole.log(colors);\r\n\r\n\t\t// delete hashes with empty values\r\n\t\tfor (var id in hashes) if (!hashes[id]) delete hashes[id];\r\n\t\tfor (var id in colors) if (!colors[id]) delete colors[id];\r\n\r\n\t\tvar found = false;\r\n\r\n\t\tfor (var w of activewindows) {\r\n\t\t\tvar windowhash = hashcode(w);\r\n\t\t\tfor (var id in hashes) {\r\n\t\t\t\tif (!tocheck.has(id)) continue;\r\n\t\t\t\tif (exists.has(id)) continue;\r\n\t\t\t\tif (w.id == id) break;\r\n\t\t\t\tif (hashes[id] == windowhash) {\r\n\t\t\t\t\tconsole.log(\"found by hash, old id \" + id + \" new id \" + w.id);\r\n\t\t\t\t\tto_refresh.push(w.id);\r\n\t\t\t\t\tif (!!names[id]) {\r\n\t\t\t\t\t\tnames[w.id] = names[id];\r\n\t\t\t\t\t\tdelete names[id];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!!colors[id]) {\r\n\t\t\t\t\t\tcolors[w.id] = colors[id];\r\n\t\t\t\t\t\tdelete colors[id];\r\n\t\t\t\t\t}\r\n\t\t\t\t\thashes[w.id] = names[id];\r\n\t\t\t\t\tdelete hashes[id];\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\ttocheck.delete(id);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (var id in tocheck) {\r\n\t\t\tconsole.log(\"did not find by hash\", id);\r\n\t\t\t//delete colors[id];\r\n\t\t\t//delete names[id];\r\n\t\t\t//delete hashes[id];\r\n\t\t}\r\n\r\n\t\tif (found) {\r\n\t\t\tawait setLocalStorage(\"windowNames\", names);\r\n\t\t\tawait setLocalStorage(\"windowColors\", colors);\r\n\t\t\tawait setLocalStorage(\"windowHashes\", hashes);\r\n\t\t\tbrowser.runtime.sendMessage({\r\n\t\t\t\tcommand: \"refresh_windows\",\r\n\t\t\t\twindow_ids: to_refresh\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconsole.log(tocheck)\r\n\t\tconsole.log(exists)\r\n\t\tconsole.log(hashes);\r\n\t\tconsole.log(names);\r\n\t\tconsole.log(colors);\r\n\t}\r\n}"]}