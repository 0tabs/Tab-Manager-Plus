{"version":3,"sources":["../../lib/helpers/utils.js"],"names":["debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","is_in_bounds","object","bounds","C","B","left","width","top","height","stringHashcode","string","hash","i","length","code","charCodeAt"],"mappings":";;AAIA,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BC,SAA9B,EAAyC;AACxC,KAAIC,OAAJ;AACA,QAAO,YAAY;AAClB,MAAIC,UAAU,IAAd;AAAA,MAAoBC,OAAOC,SAA3B;AACA,MAAIC,QAAQ,SAASA,KAAT,GAAiB;AAC5BJ,aAAU,IAAV;AACA,OAAI,CAACD,SAAL,EAAgBF,KAAKQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AAChB,GAHD;AAIA,MAAII,UAAUP,aAAa,CAACC,OAA5B;AACAO,eAAaP,OAAb;AACAA,YAAUQ,WAAWJ,KAAX,EAAkBN,IAAlB,CAAV;AACA,MAAIQ,OAAJ,EAAaT,KAAKQ,KAAL,CAAWJ,OAAX,EAAoBC,IAApB;AACb,EAVD;AAWA;;AAED,SAASO,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AACrC,KAAIC,IAAIF,MAAR;AAAA,KAAgBG,IAAIF,MAApB;AACA,KAAIC,EAAEE,IAAF,IAAUD,EAAEC,IAAZ,IAAoBF,EAAEE,IAAF,IAAUD,EAAEC,IAAF,GAASD,EAAEE,KAA7C,EAAoD;AACnD,MAAIH,EAAEI,GAAF,IAASH,EAAEG,GAAX,IAAkBJ,EAAEI,GAAF,IAASH,EAAEG,GAAF,GAAQH,EAAEI,MAAzC,EAAiD;AAChD,UAAO,IAAP;AACA;AACD;AACD,QAAO,KAAP;AACA;;AAED,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC/B,KAAIC,OAAO,CAAX;AACA,MAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EAAwC;AACvC,MAAIE,OAAOJ,OAAOK,UAAP,CAAkBH,CAAlB,CAAX;AACAD,SAAQ,CAACA,QAAQ,CAAT,IAAcA,IAAf,GAAuBG,IAA9B;AACAH,SAAOA,OAAOA,IAAd;AACA;AACD,QAAOA,IAAP;AACA","file":"utils.js","sourcesContent":["ï»¿// Returns a function, that, as long as it continues to be invoked, will not\r\n// be triggered. The function will be called after it stops being called for\r\n// N milliseconds. If `immediate` is passed, trigger the function on the\r\n// leading edge, instead of the trailing.\r\nfunction debounce(func, wait, immediate) {\r\n\tvar timeout;\r\n\treturn function () {\r\n\t\tvar context = this, args = arguments;\r\n\t\tvar later = function later() {\r\n\t\t\ttimeout = null;\r\n\t\t\tif (!immediate) func.apply(context, args);\r\n\t\t};\r\n\t\tvar callNow = immediate && !timeout;\r\n\t\tclearTimeout(timeout);\r\n\t\ttimeout = setTimeout(later, wait);\r\n\t\tif (callNow) func.apply(context, args);\r\n\t}\r\n}\r\n\r\nfunction is_in_bounds(object, bounds) {\r\n\tvar C = object, B = bounds;\r\n\tif (C.left >= B.left && C.left <= B.left + B.width) {\r\n\t\tif (C.top >= B.top && C.top <= B.top + B.height) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nfunction stringHashcode(string) {\r\n\tvar hash = 0;\r\n\tfor (var i = 0; i < string.length; i++) {\r\n\t\tvar code = string.charCodeAt(i);\r\n\t\thash = ((hash << 5) - hash) + code;\r\n\t\thash = hash & hash; // Convert to 32bit integer\r\n\t}\r\n\treturn hash;\r\n}"]}